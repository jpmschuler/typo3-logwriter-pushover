git:getNextVersion:
  needs: []
  rules:
    - if: '($CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main") && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'
  image:
    name: gittools/gitversion
    entrypoint: [""]
  stage: .pre
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0 # force a deep/non-shallow fetch need by gitversion
  cache: [] # caches and before / after scripts can mess things up
  before_script: []
  after_script: []
  script:
    - |
      if [[ "${CI_SCRIPT_TRACE}" == "true" ]] || [[ -n "${CI_DEBUG_TRACE}" ]]; then
        echo "Debugging enabled"
        set -xv
      fi

      if [[ "${CI_GITVERSION_TRACE}" == "true" ]] || [[ -n "${CI_DEBUG_TRACE}" ]]; then
        echo "Tracing is on, showing Gitversion configuration (including settings from defaults)..."
        /tools/dotnet-gitversion /showconfig
        VERBOSITYSETTING='/verbosity Diagnostic'
      fi

      echo "running git version and setting version in pipeline variables using dotenv artifacts"

      /tools/dotnet-gitversion /output buildserver $VERBOSITYSETTING

      # We could just collect the output file gitversion.properties (with artifacts:report:dotenv: gitversion.properties as it is already in DOTENV format,
      # however it contains ~33 variables which unnecessarily consumes many of the 50 max DOTENV variables of the free GitLab version.
      # Limits are higher for licensed editions, see https://docs.gitlab.com/ee/ci/yaml/artifacts_reports.html#artifactsreportsdotenv
      grep 'GitVersion_LegacySemVer='          gitversion.properties >> thisversion.env
      grep 'GitVersion_SemVer='          gitversion.properties >> thisversion.env
      grep 'GitVersion_FullSemVer='      gitversion.properties >> thisversion.env
      grep 'GitVersion_Major='           gitversion.properties >> thisversion.env
      grep 'GitVersion_Minor='           gitversion.properties >> thisversion.env
      grep 'GitVersion_Patch='           gitversion.properties >> thisversion.env
      grep 'GitVersion_MajorMinorPatch=' gitversion.properties >> thisversion.env
  artifacts:
    reports:
      #propagates variables into the pipeline level
      dotenv: thisversion.env

git:publish:
  cache: {}
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0 # force a deep/non-shallow fetch need by gitversion
  rules:
    - if: '($CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main") $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'
  stage: deploy
  before_script:
    - eval $(ssh-agent -s); echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null; mkdir -p ~/.ssh; chmod 700 ~/.ssh
    - echo -e "Host ${CI_SERVER_HOST}\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git config --global --add safe.directory $(pwd)
    - git config gui.encoding utf-8
    - git remote set-url origin "git@${CI_SERVER_HOST}:${CI_PROJECT_PATH}.git"
    - git fetch --all
    - export GIT_AUTHOR_NAME="${GITLAB_USER_NAME}"
    - export GIT_AUTHOR_EMAIL="${GITLAB_USER_EMAIL}"
    - export GIT_COMMITTER_NAME="${GITLAB_USER_NAME}"
    - export GIT_COMMITTER_EMAIL="${GITLAB_USER_EMAIL}"
  script:
    - git checkout ${CI_COMMIT_BRANCH}
    - export GIT_LASTTAG="$(git describe --tags --abbrev=0)"
    - export CHANGELOG="$(git log ${GIT_LASTTAG}...HEAD --abbrev=0 --format="%s%n%b")"
    - composer run version:set $GitVersion_MajorMinorPatch
    - git commit ext_emconf.php -m "[RELEASE] Releasing v${GitVersion_MajorMinorPatch}"
    - git tag v${GitVersion_MajorMinorPatch} -m "[RELEASE] Releasing v${GitVersion_MajorMinorPatch}" -m "" -m "Changes since last release:" -m "${CHANGELOG}"
    - git checkout ${GIT_RELEASE_BRANCH:=release}
    - git merge v${GitVersion_MajorMinorPatch}
    - git push --all --follow-tags
